knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
knitr::opts_chunk$set(echo = TRUE)
colleges <- readr::read_csv("data/ca_college_data.csv") %>% janitor::clean_names()
glimpse(colleges)
names(colleges)
colleges %>%
count(city) %>%
arrange(desc(n))
colleges %>%
count(city) %>%
top_n(10, n) %>%
ggplot(aes(x=reorder(city,n), y=n))+
geom_col()+
coord_flip()
colleges %>%
group_by(city) %>%
summarise(avg_cost=mean(costt4_a, na.rm=T)) %>%
arrange(desc(avg_cost))
colleges %>%
filter(city=="Claremont" | city=="Davis") %>%
ggplot(aes(x=instnm, y=costt4_a)) + geom_col() + coord_flip()
colleges %>%
ggplot(aes(x=adm_rate, y=c150_4_pooled))+
geom_point(na.rm=T)+
geom_smooth(method=1m, se=F, na.rm=T)
colleges %>%
ggplot(aes(x=adm_rate, y=c150_4_pooled))+
geom_point(na.rm=T)+
geom_smooth(method=Im, se=F, na.rm=T)
colleges %>%
ggplot(aes(x=costt4_a, y=c150_4_pooled))+
geom_point(na.rm=T)+
geom_smooth(method=lm, se=F, na.rm = T)
university_california <- colleges %>%
filter_all(any_vars(str_detect(., pattern = "University of California")))
university_california <- colleges %>%
filter(str_detect(instnm, "University of California") & str_detect(instnm, c("Hastings", "San Francisco"), negate=T))
university_california <- colleges %>%
filter(str_detect(instnm, "University of California") & str_detect(instnm, c("Hastings", "San Francisco"), negate=T))
univ_cali
university_california <- colleges %>%
filter(str_detect(instnm, "University of California") & str_detect(instnm, c("Hastings", "San Francisco"), negate=T))
university_california_final <- university_california %>%
filter(city!="San Francisco")
university_california_final <- university_california %>%
separate(instm, into=c("univ", "campus"), sep="-")
university_california_final <- university_california_final %>%
separate(instm, into=c("univ", "campus"), sep="-")
university_california_final <- university_california %>%
separate(instm, into=c("UNIV", "CAMPUS"), sep="-")
university_california_final <- university_california %>%
separate(instm,into=c("UNIV", "CAMPUS"), sep="-")
university_california_final
univ_calif_final %>%
select(campus, adm_rate) %>%
arrange(adm_rate)
university_california_final %>%
select(campus, adm_rate) %>%
arrange(adm_rate)
university_california_final %>%
select(campus, adm_rate) %>%
arrange(adm_rate)
university_california_final %>%
select(campus, adm_rate) %>%
arrange(adm_rate)
View(university_california)
View(colleges)
university_california_final %>%
select(CAMPUS, adm_rate) %>%
arrange(adm_rate)
univ_cali_f %>%
filter(adm_rate==max(adm_rate)|adm_rate==min(adm_rate)) %>%
select(univ,campus,adm_rate)
university_california_final %>%
filter(adm_rate==max(adm_rate)|adm_rate==min(adm_rate)) %>%
select(univ,campus,adm_rate)
university_california <- colleges %>%
filter(str_detect(instnm, "University of California") & str_detect(instnm, c("Hastings", "San Francisco"), negate=T))
university_california_final
university_california_final <- university_california_final %>%
separate(instnm, c("univ", "campus"), sep="-")
university_california_final
university_california_final %>%
filter(adm_rate==max(adm_rate)|adm_rate==min(adm_rate)) %>%
select(univ,campus,adm_rate)
univ_calif_final %>%
ggplot(aes(x=reorder(campus, adm_rate), y=adm_rate))+
geom_col()+
coord_flip()
university_california_final %>%
ggplot(aes(x=reorder(campus, adm_rate), y=adm_rate))+
geom_col()+
coord_flip()
university_california_final %>%
select(campus, pcip26) %>%
arrange(pcip26)
univ_calif_final %>%
ggplot(aes(x=reorder(campus, pcip26), y=pcip26))+
geom_col()
university_california_final %>%
ggplot(aes(x=reorder(campus, pcip26), y=pcip26))+
geom_col()
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("install.packages("ggVennDiagram")", "install.packages("ggworldcloud")"))
install.packages(c("install.packages("ggVennDiagram")", "install.packages("ggworldcloud")"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggVennDiagram")
install.packages("ggworldcloud")
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
install.packages(c("class", "cli", "clipr", "colorspace", "crayon", "evaluate", "foreign", "glue", "jsonlite", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival", "tidyselect", "tinytex", "yaml"))
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
library(tidyverse)
library(skimr)
library(ggplot2)
library(here)
library(janitor)
library(ggmap)
seed <- read.csv(here("project", "data", "interannual_variability.csv"))%>%
clean_names()%>%
select(!contains("sd_"))%>%
select(!contains("acf"))%>%
select(!contains("mid"))
skim(seed)
seed <- seed%>%
mutate(region=case_when(-23.5<=latitude & latitude<=23.5~"Tropical",
23.5<latitude | -23.5>latitude~"Temperate",
))
head(seed, n=5)
seed %>%
select(cv, cv_precip_spring, cv_precip_summer, region, pollination_type, seed_dispersal_type)%>%
rename(spring = cv_precip_spring, summer=cv_precip_summer)%>%
pivot_longer(cols = c("spring", "summer"),
values_to = "cv_precip",
names_to = "season")%>%
ggplot(aes(x=cv_precip, y=cv, color=season))+
geom_point(alpha=.2)+
geom_smooth(se=F)
seed %>%
ggplot(aes(x=cv_precip_annual, y=cv))+
geom_point()+
geom_smooth(se=F)
lat <- c(-46.3, 65.9)
long <- c(-148.1, 176.5)
bounding <- make_bbox(long, lat, f = 0.05)
seed_map <- get_map(bounding, style = "watercolor", source = "stamen")
ggmap(seed_map)+
geom_point(data=seed, aes(longitude, latitude, color = cv))
seed%>%
ggplot(aes(x=latitude, y=cv))+
geom_point()+
geom_smooth(se=F)+
facet_wrap(~hemisphere, scales = "free")
seed %>%
group_by(pollination_type)%>%
ggplot(aes(x=pollination_type, y=cv, fill=pollination_type))+
geom_boxplot()+
facet_wrap(~seed_dispersal_type)
seed%>%
group_by(genus)%>%
summarise(type=n_distinct(species))%>%
arrange(desc(type))
seed%>%
filter(genus == "QUERCUS" | genus == "PINUS" | genus == "ABIES")%>%
ggplot(aes(x=genus, y=cv, fill=genus))+
geom_boxplot()
seed%>%
filter(genus == "QUERCUS" | genus == "PINUS" | genus == "ABIES")%>%
ggplot(aes(x=latitude, fill=genus))+
geom_density(alpha=.2)
knitr::opts_chunk$set(echo = TRUE)
---
title: "15L group project"
---
title: "15L group project"
seed <- read.csv(here("project", "data", "interannual_variability.csv"))%>%
clean_names()%>%
select(!contains("sd_"))%>%
select(!contains("acf"))%>%
select(!contains("mid"))
skim(seed)
library(tidyverse)
library(skimr)
library(ggplot2)
library(here)
library(janitor)
library(ggmap)
seed <- seed%>%
mutate(region=case_when(-23.5<=latitude & latitude<=23.5~"Tropical",
23.5<latitude | -23.5>latitude~"Temperate",
))
head(seed, n=5)
lat <- c(-46.3, 65.9)
long <- c(-148.1, 176.5)
bounding <- make_bbox(long, lat, f = 0.05)
seed_map <- get_map(bounding, style = "watercolor", source = "stamen")
ggmap(seed_map)+
geom_point(data=seed, aes(longitude, latitude, color = cv))
seed%>%
ggplot(aes(x=latitude, y=cv))+
geom_point()+
geom_smooth(se=F)+
facet_wrap(~hemisphere, scales = "free")
seed %>%
ggplot(aes(x=cv_precip_annual, y=cv))+
geom_point()+
geom_smooth(se=F)
seed %>%
select(cv, cv_precip_spring, cv_precip_summer, region, pollination_type, seed_dispersal_type)%>%
rename(spring = cv_precip_spring, summer=cv_precip_summer)%>%
pivot_longer(cols = c("spring", "summer"),
values_to = "cv_precip",
names_to = "season")%>%
ggplot(aes(x=cv_precip, y=cv, color=season))+
geom_point(alpha=.2)+
geom_smooth(se=F)
seed %>%
group_by(pollination_type)%>%
ggplot(aes(x=pollination_type, y=cv, fill=pollination_type))+
geom_boxplot()+
facet_wrap(~seed_dispersal_type)
seed%>%
group_by(genus)%>%
summarise(type=n_distinct(species))%>%
arrange(desc(type))
seed%>%
filter(genus == "QUERCUS" | genus == "PINUS" | genus == "ABIES")%>%
ggplot(aes(x=genus, y=cv, fill=genus))+
geom_boxplot()
seed%>%
filter(genus == "QUERCUS" | genus == "PINUS" | genus == "ABIES")%>%
ggplot(aes(x=latitude, fill=genus))+
geom_density(alpha=.2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px")
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
penguins %>%
ggplot(aes(x=body_mass_g, y=flipper_length_mm))+
geom_point()
library(tidyverse)
library(janitor)
library("palmerpenguins")
options(scipen=999) #cancels the use of scientific notation for the session
penguins <- penguins
heartrate <- readr::read_csv("data/heartrate.csv")
heartrate <- heartrate %>%
add_column(no_drug = c(71, 79, 66, 62, 73, 81) )
homerange <- read_csv("data/modified_Tamburelloetal_HomeRangeDatabase.csv")
head(penguins)
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(na.rm = TRUE)+
coord_flip()
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
homerange %>%
ggplot(aes(x = taxon, y = body_mass_g, fill = island)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
homerange %>%
ggplot(aes(x = log10.mass, y = taxon, fill = )) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
homerange %>%
ggplot(aes(x = log10.mass, y = taxon, fill = taxon )) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
homerange %>%
ggplot(aes(x = log10.mass, y = taxon, fill = taxon )) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE)
+
coord_flip()
homerange %>%
ggplot(aes(x = log10.mass, y = taxon, fill = taxon )) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
heartrate_long <- heartrate %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_long
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(ggmap)
library(albersusa)
install.packages(alberusa)
install.packages(albersua)
install.packages(albersusa)
install.packages("albersusa")
knitr::opts_chunk$set(echo = TRUE)
install.packages("albersusa")
install.packages("albersusa")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("devtools")
library(devtools)
devtools::install_github("dkahle/ggmap")
